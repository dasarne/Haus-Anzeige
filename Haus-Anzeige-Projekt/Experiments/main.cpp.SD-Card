#include <WiFiManager.h> // WiFiManager-Bibliothek hinzufügen
#include <HTTPClient.h>
#include <SPI.h>
#include <FS.h>
#include <SD.h>
#include <TFT_eSPI.h>    // Hardware-specific library
#include <TFT_eWidget.h> // Widget library
#include <ArduinoJson.h>

#define HSPI_MISO 12
#define HSPI_MOSI 13
#define HSPI_SCLK 14
#define HSPI_CS   16

// WiFiManager-Objekt erstellen
WiFiManager wifiManager;

const char *serverURL = "http://192.168.7.2:2880/aktuellsteTemperatur";

TFT_eSPI tft = TFT_eSPI(); // Invoke custom library
MeterWidget tempTFT = MeterWidget(&tft);

void setup()
{
  Serial.begin(115200);

  // Initialisiere WiFi-Verbindung und konfiguriere WiFiManager
  wifiManager.autoConnect("Test-AP"); // Erstelle einen Access Point mit dem Namen "ESP32-AP"

  Serial.println("Erfolgreich mit dem WLAN verbunden");

  tft.init();
  tft.setRotation(0);
  tft.fillScreen(TFT_BLACK);
  // Colour zones are set as a start and end percentage of full scale (0-100)
  // If start and end of a colour zone are the same then that colour is not used
  //            --Red--  -Org-   -Yell-  -Grn-
  tempTFT.setZones(75, 100, 50, 75, 25, 50, 0, 25); // Example here red starts at 75% and ends at 100% of full scale
  // Meter is 239 pixels wide and 126 pixels high
  tempTFT.analogMeter(0, 0, -10.0, 30.0, "°C", "-10", "0", "10", "20", "30"); // Draw analogue meter at 0, 0

  SPIClass hspi = SPIClass(HSPI);
  hspi.begin();
  hspi.begin(TFT_SCLK, TFT_MISO, TFT_MOSI, HSPI_CS); // SCLK, MISO, MOSI, SS
  pinMode(HSPI_CS, OUTPUT);                              // HSPI SS

  if (!SD.begin())
  {
    Serial.println("Card Mount Failed");
    return;
  }
  uint8_t cardType = SD.cardType();

  if (cardType == CARD_NONE)
  {
    Serial.println("No SD card attached");
    return;
  }

  Serial.print("SD Card Type: ");
  if (cardType == CARD_MMC)
  {
    Serial.println("MMC");
  }
  else if (cardType == CARD_SD)
  {
    Serial.println("SDSC");
  }
  else if (cardType == CARD_SDHC)
  {
    Serial.println("SDHC");
  }
  else
  {
    Serial.println("UNKNOWN");
  }

  uint64_t cardSize = SD.cardSize() / (1024 * 1024);
  Serial.printf("SD Card Size: %lluMB\n", cardSize);

  Serial.println("initialisation done.");
}

void loop()
{
  if (WiFi.status() == WL_CONNECTED)
  {
    HTTPClient http;
    float temp = -11.1;

    // HTTP GET-Anfrage senden
    http.begin(serverURL);
    int httpCode = http.GET();

    if (httpCode > 0)
    {
      if (httpCode == HTTP_CODE_OK)
      {
        // JSON-Antwort empfangen
        String payload = http.getString();

        // JSON-Antwort parsen
        StaticJsonDocument<128> doc;
        DeserializationError error = deserializeJson(doc, payload);

        if (error)
        {
          Serial.print("deserializeJson() failed: ");
          Serial.println(error.c_str());
        }
        else
        {
          JsonObject root_0 = doc[0];
          int root_0_id = root_0["id"];         // 21597
          const char *root_0_ts = root_0["ts"]; // "2023-11-09T14:15:40.000Z"
          temp = root_0["value"];               // 10.4
          tempTFT.updateNeedle(temp, 0);

          Serial.println("Die Außen-Temperatur:");
          Serial.println(temp);
        }
      }
      else
      {
        Serial.println("Fehler bei der Anfrage");
      }
    }
    else
    {
      Serial.println("Fehler bei der Verbindung zum Server");
    }

    http.end();
  }
  File file=SD.open("/test.txt");
  Serial.println(file.name());
  Serial.println(file.readString());
  delay(10000); // Warte 10 Sekunden, bevor die nächste Anfrage gesendet wird
}
